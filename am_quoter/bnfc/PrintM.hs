{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintM where

-- pretty-printer generated by the BNF converter

import AbsM
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print VAR where
  prt _ (VAR i) = doc (showString ( i))


instance Print COLON where
  prt _ (COLON i) = doc (showString ( i))


instance Print INT where
  prt _ (INT i) = doc (showString ( i))


instance Print REAL where
  prt _ (REAL i) = doc (showString ( i))


instance Print BOOL where
  prt _ (BOOL i) = doc (showString ( i))


instance Print CHAR where
  prt _ (CHAR i) = doc (showString ( i))


instance Print SLPAR where
  prt _ (SLPAR i) = doc (showString ( i))


instance Print SRPAR where
  prt _ (SRPAR i) = doc (showString ( i))


instance Print FUN where
  prt _ (FUN i) = doc (showString ( i))


instance Print LPAR where
  prt _ (LPAR i) = doc (showString ( i))


instance Print RPAR where
  prt _ (RPAR i) = doc (showString ( i))


instance Print BEGIN where
  prt _ (BEGIN i) = doc (showString ( i))


instance Print END where
  prt _ (END i) = doc (showString ( i))


instance Print RETURN where
  prt _ (RETURN i) = doc (showString ( i))


instance Print IF where
  prt _ (IF i) = doc (showString ( i))


instance Print THEN where
  prt _ (THEN i) = doc (showString ( i))


instance Print ELSE where
  prt _ (ELSE i) = doc (showString ( i))


instance Print WHILE where
  prt _ (WHILE i) = doc (showString ( i))


instance Print READ where
  prt _ (READ i) = doc (showString ( i))


instance Print ASSIGN where
  prt _ (ASSIGN i) = doc (showString ( i))


instance Print PRINT where
  prt _ (PRINT i) = doc (showString ( i))


instance Print DO where
  prt _ (DO i) = doc (showString ( i))


instance Print OR where
  prt _ (OR i) = doc (showString ( i))


instance Print AND where
  prt _ (AND i) = doc (showString ( i))


instance Print NOT where
  prt _ (NOT i) = doc (showString ( i))


instance Print EQUAL where
  prt _ (EQUAL i) = doc (showString ( i))


instance Print LESST where
  prt _ (LESST i) = doc (showString ( i))


instance Print GREATERT where
  prt _ (GREATERT i) = doc (showString ( i))


instance Print LE where
  prt _ (LE i) = doc (showString ( i))


instance Print GE where
  prt _ (GE i) = doc (showString ( i))


instance Print SUB where
  prt _ (SUB i) = doc (showString ( i))


instance Print ADD where
  prt _ (ADD i) = doc (showString ( i))


instance Print MUL where
  prt _ (MUL i) = doc (showString ( i))


instance Print DIV where
  prt _ (DIV i) = doc (showString ( i))


instance Print CLPAR where
  prt _ (CLPAR i) = doc (showString ( i))


instance Print CRPAR where
  prt _ (CRPAR i) = doc (showString ( i))


instance Print SIZE where
  prt _ (SIZE i) = doc (showString ( i))


instance Print FLOOR where
  prt _ (FLOOR i) = doc (showString ( i))


instance Print CEIL where
  prt _ (CEIL i) = doc (showString ( i))


instance Print FLOAT where
  prt _ (FLOAT i) = doc (showString ( i))


instance Print DATA where
  prt _ (DATA i) = doc (showString ( i))


instance Print OF where
  prt _ (OF i) = doc (showString ( i))


instance Print CASE where
  prt _ (CASE i) = doc (showString ( i))


instance Print ARROW where
  prt _ (ARROW i) = doc (showString ( i))


instance Print SLASH where
  prt _ (SLASH i) = doc (showString ( i))


instance Print IVAL where
  prt _ (IVAL i) = doc (showString ( i))


instance Print RVAL where
  prt _ (RVAL i) = doc (showString ( i))


instance Print BVAL where
  prt _ (BVAL i) = doc (showString ( i))


instance Print CVAL where
  prt _ (CVAL i) = doc (showString ( i))


instance Print CID where
  prt _ (CID i) = doc (showString ( i))


instance Print ID where
  prt _ (ID i) = doc (showString ( i))



instance Print Prog where
  prt i e = case e of
    Prog_P0 block -> prPrec i 0 (concatD [prt 0 block])

instance Print Block where
  prt i e = case e of
    Block_P0 declarations programbody -> prPrec i 0 (concatD [prt 0 declarations, prt 0 programbody])

instance Print Declarations where
  prt i e = case e of
    Declarations_P0 declarations -> prPrec i 0 (concatD [prt 0 declarations])

instance Print Declaration where
  prt i e = case e of
    Declaration_P0 vardeclaration -> prPrec i 0 (concatD [prt 0 vardeclaration])
    Declaration_P1 fundeclaration -> prPrec i 0 (concatD [prt 0 fundeclaration])
    Declaration_P2 datadeclaration -> prPrec i 0 (concatD [prt 0 datadeclaration])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print VarDeclaration where
  prt i e = case e of
    VarDeclaration_P0 var varspecs colon type_ -> prPrec i 0 (concatD [prt 0 var, prt 0 varspecs, prt 0 colon, prt 0 type_])

instance Print VarSpecs where
  prt i e = case e of
    VarSpecs_P0 varspec morevarspecs -> prPrec i 0 (concatD [prt 0 varspec, prt 0 morevarspecs])

instance Print MoreVarSpecs where
  prt i e = case e of
    MoreVarSpecs_P0 varspec morevarspecs -> prPrec i 0 (concatD [doc (showString ","), prt 0 varspec, prt 0 morevarspecs])
    MoreVarSpecs_P1 -> prPrec i 0 (concatD [])

instance Print VarSpec where
  prt i e = case e of
    VarSpec_P0 id arraydimensions -> prPrec i 0 (concatD [prt 0 id, prt 0 arraydimensions])

instance Print Type where
  prt i e = case e of
    TypeINT int -> prPrec i 0 (concatD [prt 0 int])
    TypeREAL real -> prPrec i 0 (concatD [prt 0 real])
    TypeBOOL bool -> prPrec i 0 (concatD [prt 0 bool])
    TypeCHAR char -> prPrec i 0 (concatD [prt 0 char])
    TypeID id -> prPrec i 0 (concatD [prt 0 id])

instance Print ArrayDimensions where
  prt i e = case e of
    ArrayDimensions_P0 arrdimss -> prPrec i 0 (concatD [prt 0 arrdimss])

instance Print ArrDims where
  prt i e = case e of
    ArrDims_P0 slpar expr srpar -> prPrec i 0 (concatD [prt 0 slpar, prt 0 expr, prt 0 srpar])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print BasicArrayDimensions where
  prt i e = case e of
    BasicArrayDimensions_P0 emptyarrdimss -> prPrec i 0 (concatD [prt 0 emptyarrdimss])

instance Print EmptyArrDims where
  prt i e = case e of
    EmptyArrDims_P0 slpar srpar -> prPrec i 0 (concatD [prt 0 slpar, prt 0 srpar])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print FunDeclaration where
  prt i e = case e of
    FunDeclaration_P0 fun id paramlist colon type_ clpar funblock crpar -> prPrec i 0 (concatD [prt 0 fun, prt 0 id, prt 0 paramlist, prt 0 colon, prt 0 type_, prt 0 clpar, prt 0 funblock, prt 0 crpar])

instance Print FunBlock where
  prt i e = case e of
    FunBlock_P0 declarations funbody -> prPrec i 0 (concatD [prt 0 declarations, prt 0 funbody])

instance Print FunBody where
  prt i e = case e of
    FunBody_P0 begin progstmts return expr end -> prPrec i 0 (concatD [prt 0 begin, prt 0 progstmts, prt 0 return, prt 0 expr, doc (showString ";"), prt 0 end])
    FunBody_P1 progstmts return expr -> prPrec i 0 (concatD [prt 0 progstmts, prt 0 return, prt 0 expr, doc (showString ";")])

instance Print ParamList where
  prt i e = case e of
    ParamList_P0 lpar parameters rpar -> prPrec i 0 (concatD [prt 0 lpar, prt 0 parameters, prt 0 rpar])

instance Print Parameters where
  prt i e = case e of
    Parameters_P0 basicdeclaration moreparameters -> prPrec i 0 (concatD [prt 0 basicdeclaration, prt 0 moreparameters])
    Parameters_P1 -> prPrec i 0 (concatD [])

instance Print MoreParameters where
  prt i e = case e of
    MoreParameters_P0 basicdeclaration moreparameters -> prPrec i 0 (concatD [doc (showString ","), prt 0 basicdeclaration, prt 0 moreparameters])
    MoreParameters_P1 -> prPrec i 0 (concatD [])

instance Print BasicDeclaration where
  prt i e = case e of
    BasicDeclaration_P0 varidentlist colon type_ -> prPrec i 0 (concatD [prt 0 varidentlist, prt 0 colon, prt 0 type_])

instance Print VarIdentList where
  prt i e = case e of
    VarIdentList_P0 varident morevarident -> prPrec i 0 (concatD [prt 0 varident, prt 0 morevarident])

instance Print VarIdent where
  prt i e = case e of
    VarIdent_P0 id basicarraydimensions -> prPrec i 0 (concatD [prt 0 id, prt 0 basicarraydimensions])

instance Print MoreVarIdent where
  prt i e = case e of
    MoreVarIdent_P0 varident morevarident -> prPrec i 0 (concatD [doc (showString ","), prt 0 varident, prt 0 morevarident])
    MoreVarIdent_P1 -> prPrec i 0 (concatD [])

instance Print DataDeclaration where
  prt i e = case e of
    DataDeclaration_P0 data_ id equal consdeclarations -> prPrec i 0 (concatD [prt 0 data_, prt 0 id, prt 0 equal, prt 0 consdeclarations])

instance Print ConsDeclarations where
  prt i e = case e of
    ConsDeclarations_P0 consdeclaration moreconsdeclaration -> prPrec i 0 (concatD [prt 0 consdeclaration, prt 0 moreconsdeclaration])

instance Print MoreConsDeclaration where
  prt i e = case e of
    MoreConsDeclaration_P0 slash consdeclaration moreconsdeclaration -> prPrec i 0 (concatD [prt 0 slash, prt 0 consdeclaration, prt 0 moreconsdeclaration])
    MoreConsDeclaration_P1 -> prPrec i 0 (concatD [])

instance Print ConsDeclaration where
  prt i e = case e of
    ConsDeclaration_P0 cid of_ typelist -> prPrec i 0 (concatD [prt 0 cid, prt 0 of_, prt 0 typelist])
    ConsDeclaration_P1 cid -> prPrec i 0 (concatD [prt 0 cid])

instance Print TypeList where
  prt i e = case e of
    TypeList_P0 type_ moretype -> prPrec i 0 (concatD [prt 0 type_, prt 0 moretype])

instance Print MoreType where
  prt i e = case e of
    MoreType_P0 mul type_ moretype -> prPrec i 0 (concatD [prt 0 mul, prt 0 type_, prt 0 moretype])
    MoreType_P1 -> prPrec i 0 (concatD [])

instance Print ProgramBody where
  prt i e = case e of
    ProgramBody_P0 begin progstmts end -> prPrec i 0 (concatD [prt 0 begin, prt 0 progstmts, prt 0 end])
    ProgramBody_P1 progstmts -> prPrec i 0 (concatD [prt 0 progstmts])

instance Print ProgStmts where
  prt i e = case e of
    ProgStmts_P0 progstmts -> prPrec i 0 (concatD [prt 0 progstmts])

instance Print ProgStmt where
  prt i e = case e of
    ProgStmt_P0 if_ expr then_ progstmt1 else_ progstmt2 -> prPrec i 0 (concatD [prt 0 if_, prt 0 expr, prt 0 then_, prt 0 progstmt1, prt 0 else_, prt 0 progstmt2])
    ProgStmt_P1 while expr do_ progstmt -> prPrec i 0 (concatD [prt 0 while, prt 0 expr, prt 0 do_, prt 0 progstmt])
    ProgStmt_P2 read identifier -> prPrec i 0 (concatD [prt 0 read, prt 0 identifier])
    ProgStmt_P3 identifier assign expr -> prPrec i 0 (concatD [prt 0 identifier, prt 0 assign, prt 0 expr])
    ProgStmt_P4 print expr -> prPrec i 0 (concatD [prt 0 print, prt 0 expr])
    ProgStmt_P5 clpar block crpar -> prPrec i 0 (concatD [prt 0 clpar, prt 0 block, prt 0 crpar])
    ProgStmt_P6 case_ expr of_ clpar caselist crpar -> prPrec i 0 (concatD [prt 0 case_, prt 0 expr, prt 0 of_, prt 0 clpar, prt 0 caselist, prt 0 crpar])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Identifier where
  prt i e = case e of
    Identifier_P0 id arraydimensions -> prPrec i 0 (concatD [prt 0 id, prt 0 arraydimensions])

instance Print CaseList where
  prt i e = case e of
    CaseList_P0 case_ morecase -> prPrec i 0 (concatD [prt 0 case_, prt 0 morecase])

instance Print MoreCase where
  prt i e = case e of
    MoreCase_P0 slash case_ morecase -> prPrec i 0 (concatD [prt 0 slash, prt 0 case_, prt 0 morecase])
    MoreCase_P1 -> prPrec i 0 (concatD [])

instance Print Case where
  prt i e = case e of
    Case_P0 cid varlist arrow progstmt -> prPrec i 0 (concatD [prt 0 cid, prt 0 varlist, prt 0 arrow, prt 0 progstmt])

instance Print VarList where
  prt i e = case e of
    VarList_P0 lpar varlistprime rpar -> prPrec i 0 (concatD [prt 0 lpar, prt 0 varlistprime, prt 0 rpar])
    VarList_P1 -> prPrec i 0 (concatD [])

instance Print VarListPrime where
  prt i e = case e of
    VarListPrime_P0 id morevarlistprime -> prPrec i 0 (concatD [prt 0 id, prt 0 morevarlistprime])

instance Print MoreVarListPrime where
  prt i e = case e of
    MoreVarListPrime_P0 id morevarlistprime -> prPrec i 0 (concatD [doc (showString ","), prt 0 id, prt 0 morevarlistprime])
    MoreVarListPrime_P1 -> prPrec i 0 (concatD [])

instance Print Expr where
  prt i e = case e of
    Expr_P0 expr or bintterm -> prPrec i 0 (concatD [prt 0 expr, prt 0 or, prt 0 bintterm])
    Expr_P1 bintterm -> prPrec i 0 (concatD [prt 0 bintterm])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print BintTerm where
  prt i e = case e of
    BintTerm_P0 bintterm and bintfactor -> prPrec i 0 (concatD [prt 0 bintterm, prt 0 and, prt 0 bintfactor])
    BintTerm_P1 bintfactor -> prPrec i 0 (concatD [prt 0 bintfactor])

instance Print BintFactor where
  prt i e = case e of
    BintFactor_P0 not bintfactor -> prPrec i 0 (concatD [prt 0 not, prt 0 bintfactor])
    BintFactor_P1 intexpr1 compareop intexpr2 -> prPrec i 0 (concatD [prt 0 intexpr1, prt 0 compareop, prt 0 intexpr2])
    BintFactor_P2 intexpr -> prPrec i 0 (concatD [prt 0 intexpr])

instance Print CompareOp where
  prt i e = case e of
    CompareOp_P0 equal -> prPrec i 0 (concatD [prt 0 equal])
    CompareOp_P1 lesst -> prPrec i 0 (concatD [prt 0 lesst])
    CompareOp_P2 greatert -> prPrec i 0 (concatD [prt 0 greatert])
    CompareOp_P3 le -> prPrec i 0 (concatD [prt 0 le])
    CompareOp_P4 ge -> prPrec i 0 (concatD [prt 0 ge])

instance Print IntExpr where
  prt i e = case e of
    IntExpr_P0 intexpr addop intterm -> prPrec i 0 (concatD [prt 0 intexpr, prt 0 addop, prt 0 intterm])
    IntExpr_P1 intterm -> prPrec i 0 (concatD [prt 0 intterm])

instance Print AddOp where
  prt i e = case e of
    AddOp_P0 add -> prPrec i 0 (concatD [prt 0 add])
    AddOp_P1 sub -> prPrec i 0 (concatD [prt 0 sub])

instance Print IntTerm where
  prt i e = case e of
    IntTerm_P0 intterm mulop intfactor -> prPrec i 0 (concatD [prt 0 intterm, prt 0 mulop, prt 0 intfactor])
    IntTerm_P1 intfactor -> prPrec i 0 (concatD [prt 0 intfactor])

instance Print MulOp where
  prt i e = case e of
    MulOp_P0 mul -> prPrec i 0 (concatD [prt 0 mul])
    MulOp_P1 div -> prPrec i 0 (concatD [prt 0 div])

instance Print IntFactor where
  prt i e = case e of
    IntFactor_P0 lpar expr rpar -> prPrec i 0 (concatD [prt 0 lpar, prt 0 expr, prt 0 rpar])
    IntFactor_P1 size lpar id basicarraydimensions rpar -> prPrec i 0 (concatD [prt 0 size, prt 0 lpar, prt 0 id, prt 0 basicarraydimensions, prt 0 rpar])
    IntFactor_P2 float lpar expr rpar -> prPrec i 0 (concatD [prt 0 float, prt 0 lpar, prt 0 expr, prt 0 rpar])
    IntFactor_P3 floor lpar expr rpar -> prPrec i 0 (concatD [prt 0 floor, prt 0 lpar, prt 0 expr, prt 0 rpar])
    IntFactor_P4 ceil lpar expr rpar -> prPrec i 0 (concatD [prt 0 ceil, prt 0 lpar, prt 0 expr, prt 0 rpar])
    IntFactor_P5 id modifierlist -> prPrec i 0 (concatD [prt 0 id, prt 0 modifierlist])
    IntFactor_P6 ival -> prPrec i 0 (concatD [prt 0 ival])
    IntFactor_P7 rval -> prPrec i 0 (concatD [prt 0 rval])
    IntFactor_P8 bval -> prPrec i 0 (concatD [prt 0 bval])
    IntFactor_P9 sub intfactor -> prPrec i 0 (concatD [prt 0 sub, prt 0 intfactor])
    IntFactor_P10 cid consargumentlist -> prPrec i 0 (concatD [prt 0 cid, prt 0 consargumentlist])
    IntFactor_P11 cval -> prPrec i 0 (concatD [prt 0 cval])

instance Print ModifierList where
  prt i e = case e of
    ModifierList_P0 funargumentlist -> prPrec i 0 (concatD [prt 0 funargumentlist])
    ModifierList_P1 arraydimensions -> prPrec i 0 (concatD [prt 0 arraydimensions])

instance Print FunArgumentList where
  prt i e = case e of
    FunArgumentList_P0 lpar arguments rpar -> prPrec i 0 (concatD [prt 0 lpar, prt 0 arguments, prt 0 rpar])

instance Print Arguments where
  prt i e = case e of
    Arguments_P0 exprs -> prPrec i 0 (concatD [prt 0 exprs])

instance Print ConsArgumentList where
  prt i e = case e of
    ConsArgumentList_P0 funargumentlist -> prPrec i 0 (concatD [prt 0 funargumentlist])
    ConsArgumentList_P1 -> prPrec i 0 (concatD [])


