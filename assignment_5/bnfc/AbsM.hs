

module AbsM where

-- Haskell module generated by the BNF converter




newtype VAR = VAR String deriving (Eq, Ord, Show, Read)
newtype COLON = COLON String deriving (Eq, Ord, Show, Read)
newtype INT = INT String deriving (Eq, Ord, Show, Read)
newtype REAL = REAL String deriving (Eq, Ord, Show, Read)
newtype BOOL = BOOL String deriving (Eq, Ord, Show, Read)
newtype CHAR = CHAR String deriving (Eq, Ord, Show, Read)
newtype SLPAR = SLPAR String deriving (Eq, Ord, Show, Read)
newtype SRPAR = SRPAR String deriving (Eq, Ord, Show, Read)
newtype FUN = FUN String deriving (Eq, Ord, Show, Read)
newtype LPAR = LPAR String deriving (Eq, Ord, Show, Read)
newtype RPAR = RPAR String deriving (Eq, Ord, Show, Read)
newtype BEGIN = BEGIN String deriving (Eq, Ord, Show, Read)
newtype END = END String deriving (Eq, Ord, Show, Read)
newtype RETURN = RETURN String deriving (Eq, Ord, Show, Read)
newtype IF = IF String deriving (Eq, Ord, Show, Read)
newtype THEN = THEN String deriving (Eq, Ord, Show, Read)
newtype ELSE = ELSE String deriving (Eq, Ord, Show, Read)
newtype WHILE = WHILE String deriving (Eq, Ord, Show, Read)
newtype READ = READ String deriving (Eq, Ord, Show, Read)
newtype ASSIGN = ASSIGN String deriving (Eq, Ord, Show, Read)
newtype PRINT = PRINT String deriving (Eq, Ord, Show, Read)
newtype DO = DO String deriving (Eq, Ord, Show, Read)
newtype OR = OR String deriving (Eq, Ord, Show, Read)
newtype AND = AND String deriving (Eq, Ord, Show, Read)
newtype NOT = NOT String deriving (Eq, Ord, Show, Read)
newtype EQUAL = EQUAL String deriving (Eq, Ord, Show, Read)
newtype LESST = LESST String deriving (Eq, Ord, Show, Read)
newtype GREATERT = GREATERT String deriving (Eq, Ord, Show, Read)
newtype LE = LE String deriving (Eq, Ord, Show, Read)
newtype GE = GE String deriving (Eq, Ord, Show, Read)
newtype SUB = SUB String deriving (Eq, Ord, Show, Read)
newtype ADD = ADD String deriving (Eq, Ord, Show, Read)
newtype MUL = MUL String deriving (Eq, Ord, Show, Read)
newtype DIV = DIV String deriving (Eq, Ord, Show, Read)
newtype CLPAR = CLPAR String deriving (Eq, Ord, Show, Read)
newtype CRPAR = CRPAR String deriving (Eq, Ord, Show, Read)
newtype SIZE = SIZE String deriving (Eq, Ord, Show, Read)
newtype FLOOR = FLOOR String deriving (Eq, Ord, Show, Read)
newtype CEIL = CEIL String deriving (Eq, Ord, Show, Read)
newtype FLOAT = FLOAT String deriving (Eq, Ord, Show, Read)
newtype DATA = DATA String deriving (Eq, Ord, Show, Read)
newtype OF = OF String deriving (Eq, Ord, Show, Read)
newtype CASE = CASE String deriving (Eq, Ord, Show, Read)
newtype ARROW = ARROW String deriving (Eq, Ord, Show, Read)
newtype SLASH = SLASH String deriving (Eq, Ord, Show, Read)
newtype IVAL = IVAL String deriving (Eq, Ord, Show, Read)
newtype RVAL = RVAL String deriving (Eq, Ord, Show, Read)
newtype BVAL = BVAL String deriving (Eq, Ord, Show, Read)
newtype CVAL = CVAL String deriving (Eq, Ord, Show, Read)
newtype CID = CID String deriving (Eq, Ord, Show, Read)
newtype ID = ID String deriving (Eq, Ord, Show, Read)
data Prog = Prog_P0 Block
  deriving (Eq, Ord, Show, Read)

data Block = Block_P0 Declarations ProgramBody
  deriving (Eq, Ord, Show, Read)

data Declarations = Declarations_P0 [Declaration]
  deriving (Eq, Ord, Show, Read)

data Declaration
    = Declaration_P0 VarDeclaration
    | Declaration_P1 FunDeclaration
    | Declaration_P2 DataDeclaration
  deriving (Eq, Ord, Show, Read)

data VarDeclaration = VarDeclaration_P0 VAR VarSpecs COLON Type
  deriving (Eq, Ord, Show, Read)

data VarSpecs = VarSpecs_P0 VarSpec MoreVarSpecs
  deriving (Eq, Ord, Show, Read)

data MoreVarSpecs
    = MoreVarSpecs_P0 VarSpec MoreVarSpecs | MoreVarSpecs_P1
  deriving (Eq, Ord, Show, Read)

data VarSpec = VarSpec_P0 ID ArrayDimensions
  deriving (Eq, Ord, Show, Read)

data Type
    = TypeINT INT
    | TypeREAL REAL
    | TypeBOOL BOOL
    | TypeCHAR CHAR
    | TypeID ID
  deriving (Eq, Ord, Show, Read)

data ArrayDimensions = ArrayDimensions_P0 [ArrDims]
  deriving (Eq, Ord, Show, Read)

data ArrDims = ArrDims_P0 SLPAR Expr SRPAR
  deriving (Eq, Ord, Show, Read)

data BasicArrayDimensions = BasicArrayDimensions_P0 [EmptyArrDims]
  deriving (Eq, Ord, Show, Read)

data EmptyArrDims = EmptyArrDims_P0 SLPAR SRPAR
  deriving (Eq, Ord, Show, Read)

data FunDeclaration
    = FunDeclaration_P0 FUN ID ParamList COLON Type CLPAR FunBlock CRPAR
  deriving (Eq, Ord, Show, Read)

data FunBlock = FunBlock_P0 Declarations FunBody
  deriving (Eq, Ord, Show, Read)

data FunBody
    = FunBody_P0 BEGIN ProgStmts RETURN Expr END
    | FunBody_P1 ProgStmts RETURN Expr
  deriving (Eq, Ord, Show, Read)

data ParamList = ParamList_P0 LPAR Parameters RPAR
  deriving (Eq, Ord, Show, Read)

data Parameters
    = Parameters_P0 BasicDeclaration MoreParameters | Parameters_P1
  deriving (Eq, Ord, Show, Read)

data MoreParameters
    = MoreParameters_P0 BasicDeclaration MoreParameters
    | MoreParameters_P1
  deriving (Eq, Ord, Show, Read)

data BasicDeclaration = BasicDeclaration_P0 VarIdentList COLON Type
  deriving (Eq, Ord, Show, Read)

data VarIdentList = VarIdentList_P0 VarIdent MoreVarIdent
  deriving (Eq, Ord, Show, Read)

data VarIdent = VarIdent_P0 ID BasicArrayDimensions
  deriving (Eq, Ord, Show, Read)

data MoreVarIdent
    = MoreVarIdent_P0 VarIdent MoreVarIdent | MoreVarIdent_P1
  deriving (Eq, Ord, Show, Read)

data DataDeclaration
    = DataDeclaration_P0 DATA ID EQUAL ConsDeclarations
  deriving (Eq, Ord, Show, Read)

data ConsDeclarations
    = ConsDeclarations_P0 ConsDeclaration MoreConsDeclaration
  deriving (Eq, Ord, Show, Read)

data MoreConsDeclaration
    = MoreConsDeclaration_P0 SLASH ConsDeclaration MoreConsDeclaration
    | MoreConsDeclaration_P1
  deriving (Eq, Ord, Show, Read)

data ConsDeclaration
    = ConsDeclaration_P0 CID OF TypeList | ConsDeclaration_P1 CID
  deriving (Eq, Ord, Show, Read)

data TypeList = TypeList_P0 Type MoreType
  deriving (Eq, Ord, Show, Read)

data MoreType = MoreType_P0 MUL Type MoreType | MoreType_P1
  deriving (Eq, Ord, Show, Read)

data ProgramBody
    = ProgramBody_P0 BEGIN ProgStmts END | ProgramBody_P1 ProgStmts
  deriving (Eq, Ord, Show, Read)

data ProgStmts = ProgStmts_P0 [ProgStmt]
  deriving (Eq, Ord, Show, Read)

data ProgStmt
    = ProgStmt_P0 IF Expr THEN ProgStmt ELSE ProgStmt
    | ProgStmt_P1 WHILE Expr DO ProgStmt
    | ProgStmt_P2 READ Identifier
    | ProgStmt_P3 Identifier ASSIGN Expr
    | ProgStmt_P4 PRINT Expr
    | ProgStmt_P5 CLPAR Block CRPAR
    | ProgStmt_P6 CASE Expr OF CLPAR CaseList CRPAR
  deriving (Eq, Ord, Show, Read)

data Identifier = Identifier_P0 ID ArrayDimensions
  deriving (Eq, Ord, Show, Read)

data CaseList = CaseList_P0 Case MoreCase
  deriving (Eq, Ord, Show, Read)

data MoreCase = MoreCase_P0 SLASH Case MoreCase | MoreCase_P1
  deriving (Eq, Ord, Show, Read)

data Case = Case_P0 CID VarList ARROW ProgStmt
  deriving (Eq, Ord, Show, Read)

data VarList = VarList_P0 LPAR VarListPrime RPAR | VarList_P1
  deriving (Eq, Ord, Show, Read)

data VarListPrime = VarListPrime_P0 ID MoreVarListPrime
  deriving (Eq, Ord, Show, Read)

data MoreVarListPrime
    = MoreVarListPrime_P0 ID MoreVarListPrime | MoreVarListPrime_P1
  deriving (Eq, Ord, Show, Read)

data Expr = Expr_P0 Expr OR BintTerm | Expr_P1 BintTerm
  deriving (Eq, Ord, Show, Read)

data BintTerm
    = BintTerm_P0 BintTerm AND BintFactor | BintTerm_P1 BintFactor
  deriving (Eq, Ord, Show, Read)

data BintFactor
    = BintFactor_P0 NOT BintFactor
    | BintFactor_P1 IntExpr CompareOp IntExpr
    | BintFactor_P2 IntExpr
  deriving (Eq, Ord, Show, Read)

data CompareOp
    = CompareOp_P0 EQUAL
    | CompareOp_P1 LESST
    | CompareOp_P2 GREATERT
    | CompareOp_P3 LE
    | CompareOp_P4 GE
  deriving (Eq, Ord, Show, Read)

data IntExpr
    = IntExpr_P0 IntExpr AddOp IntTerm | IntExpr_P1 IntTerm
  deriving (Eq, Ord, Show, Read)

data AddOp = AddOp_P0 ADD | AddOp_P1 SUB
  deriving (Eq, Ord, Show, Read)

data IntTerm
    = IntTerm_P0 IntTerm MulOp IntFactor | IntTerm_P1 IntFactor
  deriving (Eq, Ord, Show, Read)

data MulOp = MulOp_P0 MUL | MulOp_P1 DIV
  deriving (Eq, Ord, Show, Read)

data IntFactor
    = IntFactor_P0 LPAR Expr RPAR
    | IntFactor_P1 SIZE LPAR ID BasicArrayDimensions RPAR
    | IntFactor_P2 FLOAT LPAR Expr RPAR
    | IntFactor_P3 FLOOR LPAR Expr RPAR
    | IntFactor_P4 CEIL LPAR Expr RPAR
    | IntFactor_P5 ID ModifierList
    | IntFactor_P6 IVAL
    | IntFactor_P7 RVAL
    | IntFactor_P8 BVAL
    | IntFactor_P9 SUB IntFactor
    | IntFactor_P10 CID ConsArgumentList
    | IntFactor_P11 CVAL
  deriving (Eq, Ord, Show, Read)

data ModifierList
    = ModifierList_P0 FunArgumentList | ModifierList_P1 ArrayDimensions
  deriving (Eq, Ord, Show, Read)

data FunArgumentList = FunArgumentList_P0 LPAR Arguments RPAR
  deriving (Eq, Ord, Show, Read)

data Arguments = Arguments_P0 [Expr]
  deriving (Eq, Ord, Show, Read)

data ConsArgumentList
    = ConsArgumentList_P0 FunArgumentList | ConsArgumentList_P1
  deriving (Eq, Ord, Show, Read)

